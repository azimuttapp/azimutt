import {app, BrowserWindow, session} from 'electron'
import * as process from "process";
import * as util from "util"
import {setupBridge} from "./bridge"

// eslint-disable-next-line @typescript-eslint/no-var-requires
require('update-electron-app')()

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
// declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    app.quit()
}

const createWindow = (): void => {
    // Create the browser window.
    const mainWindow = new BrowserWindow({
        icon: 'images/icon.png',
        autoHideMenuBar: true,
        webPreferences: {
            nodeIntegration: false,
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        },
    })
    setupBridge()
    makeCookiesPersistent()
    // const url = MAIN_WINDOW_WEBPACK_ENTRY // only used for debug (easier to call native functions from `renderer/index.html`)
    const url: string = process.env.AZIMUTT_DESKTOP_URL || (app.isPackaged ? 'https://azimutt.app/home' : 'http://localhost:4000/home')
    mainWindow.loadURL(url)
    mainWindow.maximize()

    // Open the DevTools.
    !app.isPackaged && mainWindow.webContents.openDevTools()
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow)

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit()
    }
})

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow()
    }
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

function makeCookiesPersistent(): void {
    const cookies = session.defaultSession.cookies
    cookies.on('changed', (event, cookie, cause, removed) => {
        if (cookie.session && !removed) {
            const protocol = cookie.secure ? 'https' : 'http'
            const domain = cookie.domain.replace(/^\./, '')
            const url = util.format('%s://%s%s', protocol, domain, cookie.path)
            cookies.set({
                ...cookie,
                url: url,
                expirationDate: new Date().setDate(new Date().getDate() + 30)
            }).catch(err => console.error("Can't set cookie", err))
        }
    })
}
