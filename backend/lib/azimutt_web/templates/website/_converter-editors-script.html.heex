<script src="https://cdn.jsdelivr.net/npm/@azimutt/aml@0.1.3/out/bundle.min.js"></script>
<!--<script src="/elm/bundle.min.js"></script>-->
<script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.51.0/min/vs/loader.min.js"></script>
<script>
    require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.51.0/min/vs' }})
    require(["vs/editor/editor.main"], function() {
        // define AML language for monaco
        monaco.languages.register({id: 'aml'})
        monaco.languages.setMonarchTokensProvider('aml', aml.monaco.language()) // syntax highlighting
        monaco.languages.registerCompletionItemProvider('aml', aml.monaco.completion()) // auto-complete
        monaco.languages.registerCodeActionProvider('aml', aml.monaco.codeAction()) // quick-fixes
        monaco.languages.registerCodeLensProvider('aml', aml.monaco.codeLens()) // hints with actions

        // define schema for JSON
        monaco.languages.json.jsonDefaults.setDiagnosticsOptions({validate: true, schemas: [{fileMatch: ['*'], schema: aml.schemaJsonDatabase}]})

        var leftLang = '<%= @left.lang %>'
        var rightLang = '<%= @right.lang %>'
        var editorLeftContainer = document.getElementById('<%= @left.id %>')
        var editorRightContainer = document.getElementById('<%= @right.id %>')

        var model = monaco.editor.createModel(defaultValue(leftLang), leftLang)
        model.context = {database: {}} // store values to be used at several place

        var leftEditor = createEditor(editorLeftContainer, {model})
        var rightEditor = createEditor(editorRightContainer, {language: rightLang, value: '', readOnly: true})
        var leftAmlButton = leftLang === 'aml' ? createAmlButton(editorLeftContainer) : undefined
        var rightAmlButton = rightLang === 'aml' ? createAmlButton(editorRightContainer) : undefined
        // get selected text: `model.getValueInRange(editor.getSelection())`
        // get cursor position: `editor.getPosition()` & `editor.setPosition(new monaco.Position(5, 3))`
        // move editor: `editor.revealLine(30)` but also: `revealLines`, `revealPosition`, `revealRange`, and also: `revealLineNearTop`, `revealLineInCenter`, `revealLineInCenterIfOutsideViewport`...
        // window.model = model
        // window.editor = leftEditor

        // sync right editor with parsing result
        function syncEditors() {
            var parsed = parse(leftLang, leftEditor.getValue())
            if (parsed.result) {
                model.context.database = parsed.result
                rightEditor.setValue(format(rightLang, parsed.result))
                // preserve the undo stack with: `model.pushEditOperations([], [{range: model.getFullModelRange(), text: value}])`
                if (leftAmlButton) { amlButtonUpdateUrl(leftAmlButton, leftEditor.getValue()) }
                if (rightAmlButton) { amlButtonUpdateUrl(rightAmlButton, rightEditor.getValue()) }
            }
            monaco.editor.setModelMarkers(model, 'owner', (parsed.errors || []).map(e => aml.monaco.createMarker(e, model, leftEditor)))
        }

        syncEditors()
        leftEditor.onDidChangeModelContent(function (e /* {
          changes: [{
            text: 'posts',
            range: {startLineNumber: 11, startColumn: 1, endLineNumber: 11, endColumn: 1},
            rangeLength: 0,
            rangeOffset: 113,
            forceMoveMarkers: false
          }],
          isUndoing: true,
          isRedoing: false,
          isFlush: false,
          isEolChange: false,
          versionId: 4,
          eol: '\\n'
        } */) {
            syncEditors()
        })

        function createEditor(container, settings) {
            var element = document.createElement('div')
            element.className = 'editor h-full'
            container.appendChild(element)
            return monaco.editor.create(element, Object.assign({theme: 'vs-light', minimap: {enabled: false}, automaticLayout: true, scrollBeyondLastLine: false}, settings))
        }
        function createAmlButton(container) {
            var buttonEl = document.createElement('a')
            buttonEl.innerText = 'Open in Azimutt'
            buttonEl.className = 'absolute bottom-2 right-5 rounded bg-white px-2 py-1 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50'
            buttonEl.href = '#'
            buttonEl.setAttribute('target', '_blank')
            container.appendChild(buttonEl)
            return buttonEl
        }
        function amlButtonUpdateUrl(button, aml) {
            button.href = '/create?aml=' + encodeURIComponent(aml).slice(0, 2000) // URI length limit, should send it with POST at some point...
        }
        function parse(lang, content) {
            if (lang === 'aml') return aml.parseAml(content)
            if (lang === 'json') return aml.parseJsonDatabase(content)
            return {errors: [{name: 'UnsupportedDialect', kind: 'error', message: 'Unsupported source dialect: ' + lang}]}
        }
        function format(lang, content) {
            if (lang === 'aml') return aml.generateAml(content)
            if (lang === 'json') return aml.generateJsonDatabase(content)
            return 'Unsupported destination dialect: ' + lang
        }
        function defaultValue(lang) {
            if (lang === 'aml') return `#
# sample AML
#

users
  id uuid pk
  name varchar index
  email varchar unique
  role user_role(admin, guest)=guest

posts {color: red}
  id uuid pk
  title varchar
  content text | in markdown
  author uuid -> users(id)
  created_at timestamp=\`now()\`
  created_by uuid -> users(id) {hidden} # inline relation
`
            if (lang === 'json') return `{
  "entities": [
    {
      "name": "users",
      "attrs": [
        {"name": "id", "type": "uuid"},
        {"name": "name", "type": "varchar"},
        {"name": "email", "type": "varchar"},
        {"name": "role", "type": "user_role", "default": "guest"}
      ],
      "pk": {"attrs": [["id"]]},
      "indexes": [
        {"attrs": [["email"]], "unique": true},
        {"attrs": [["name"]]}
      ]
    },
    {
      "name": "posts",
      "attrs": [
        {"name": "id", "type": "uuid"},
        {"name": "title", "type": "varchar"},
        {"name": "content", "type": "text", "doc": "in markdown"},
        {"name": "author", "type": "uuid"},
        {"name": "created_at", "type": "timestamp", "default": "\`now()\`"},
        {"name": "created_by", "type": "uuid"}
      ],
      "pk": {"attrs": [["id"]]}
    }
  ],
  "relations": [
    {
      "src": {"entity": "posts"},
      "ref": {"entity": "users"},
      "attrs": [{"src": ["created_by"], "ref": ["id"]}]
    },
    {
      "src": {"entity": "posts"},
      "ref": {"entity": "users"},
      "attrs": [{"src": ["author"], "ref": ["id"]}]
    }
  ],
  "types": [
    {"name": "user_role", "values": ["admin", "guest"]}
  ]
}
`
            return ''
        }
    })
</script>
