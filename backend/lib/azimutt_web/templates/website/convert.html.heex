<div class="bg-white px-6 lg:px-8 pt-0">
    <div class="mx-auto max-w-4xl text-center">
        <div class="mt-2 text-4xl font-bold tracking-tight text-gray-900 sm:text-5xl">
            <div x-data="{ open: false }" @click.outside="open = false" class="relative inline-block text-left">
                <div>
                    <button type="button" @click="open = !open" class="inline-flex w-full justify-center items-center gap-x-1.5 rounded-md bg-white px-3 py-2 text-4xl font-bold tracking-tight text-gray-900 sm:text-5xl shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50" aria-expanded="true" aria-haspopup="true">
                        <%= @from.name %>
                        <Icon.chevron_down kind="outline" class="-mr-1 h-5 w-5 text-gray-400" />
                    </button>
                </div>
                <div :class="{ 'block': open, 'hidden': !open }" class="hidden absolute right-0 z-10 mt-2 w-56 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none" role="menu" aria-orientation="vertical" aria-labelledby="menu-button" tabindex="-1">
                    <div class="py-1" role="none">
                        <%= for converter <- Azimutt.converters() |> Enum.filter(fn c -> c.parse && c.id != @from.id end) do %>
                            <a href={Routes.website_path(@conn, :convert, converter.id, @to.id)} class="block px-4 py-2 text-sm font-normal text-gray-700 hover:bg-gray-100 hover:text-gray-900" role="menuitem" tabindex="-1"><%= converter.name %></a>
                        <% end %>
                    </div>
                </div>
            </div>
            to
            <div x-data="{ open: false }" @click.outside="open = false" class="relative inline-block text-left">
                <div>
                    <button type="button" @click="open = !open" class="inline-flex w-full justify-center items-center gap-x-1.5 rounded-md bg-white px-3 py-2 text-4xl font-bold tracking-tight text-gray-900 sm:text-5xl shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50" aria-expanded="true" aria-haspopup="true">
                        <%= @to.name %>
                        <Icon.chevron_down kind="outline" class="-mr-1 h-5 w-5 text-gray-400" />
                    </button>
                </div>
                <div :class="{ 'block': open, 'hidden': !open }" class="hidden absolute right-0 z-10 mt-2 w-56 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none" role="menu" aria-orientation="vertical" aria-labelledby="menu-button" tabindex="-1">
                    <div class="py-1" role="none">
                        <%= for converter <- Azimutt.converters() |> Enum.filter(fn c -> c.generate && c.id != @to.id end) do %>
                        <a href={Routes.website_path(@conn, :convert, @from.id, converter.id)} class="block px-4 py-2 text-sm font-normal text-gray-700 hover:bg-gray-100 hover:text-gray-900" role="menuitem" tabindex="-1"><%= converter.name %></a>
                        <% end %>
                    </div>
                </div>
            </div>
            converter
        </div>
    </div>
</div>

<div class="my-4 flex justify-center">
    <p class="relative rounded-full bg-gray-50 px-4 py-1.5 text-sm leading-6 text-gray-600 ring-1 ring-inset ring-gray-900/5">
        <span class="hidden md:inline">Azimutt is a database exploration and documentation tool made for large databases.</span>
        <a href={Routes.website_path(@conn, :index)} class="font-semibold text-indigo-600"><span aria-hidden="true" class="absolute inset-0"></span> Try Azimutt now <span aria-hidden="true">â†’</span></a>
    </p>
</div>

<div class="px-12 flex flex-col lg:flex-row gap-6">
    <div id="monaco-editor-left" class="w-full h-[40rem] border border-gray-300 rounded-lg overflow-hidden"></div>
    <div id="monaco-editor-right" class="w-full h-[40rem] border border-gray-300 rounded-lg overflow-hidden"></div>
</div>

<div class="mt-6 flex justify-around justify-items-center">
    <div class="w-1/3">
        <div class="text-base font-semibold leading-7 text-gray-900"><%= @from.name %></div>
        <p class="mt-3 text-base leading-7 text-gray-600"><%= render "_converter-description.html", conn: @conn, converter: @from.id %></p>
    </div>
    <div class="w-1/3">
        <div class="text-base font-semibold leading-7 text-gray-900"><%= @to.name %></div>
        <p class="mt-3 text-base leading-7 text-gray-600"><%= render "_converter-description.html", conn: @conn, converter: @to.id %></p>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/@azimutt/aml@0.1.3/out/bundle.min.js"></script>
<!--<script src="/elm/bundle.min.js"></script>-->
<script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.51.0/min/vs/loader.min.js"></script>
<script>
    require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.51.0/min/vs' }})
    require(["vs/editor/editor.main"], function() {
        // define AML language for monaco
        monaco.languages.register({id: 'aml'})
        monaco.languages.setMonarchTokensProvider('aml', aml.monaco.language()) // syntax highlighting
        monaco.languages.registerCompletionItemProvider('aml', aml.monaco.completion()) // auto-complete
        monaco.languages.registerCodeActionProvider('aml', aml.monaco.codeAction()) // quick-fixes
        monaco.languages.registerCodeLensProvider('aml', aml.monaco.codeLens()) // hints with actions

        // define schema for JSON
        monaco.languages.json.jsonDefaults.setDiagnosticsOptions({validate: true, schemas: [{fileMatch: ['*'], schema: aml.schemaJson}]})

        var leftLang = '<%= @from.id %>'
        var rightLang = '<%= @to.id %>'
        var model = monaco.editor.createModel(defaultValue(leftLang), leftLang)
        model.context = {database: {}} // store values to be used at several place
        var editorLeft = monaco.editor.create(document.getElementById('monaco-editor-left'), {
            theme: 'vs-light',
            model,
            minimap: {enabled: false},
            automaticLayout: true
        })
        var editorRight = monaco.editor.create(document.getElementById('monaco-editor-right'), {
            theme: 'vs-light',
            language: rightLang,
            readOnly: true,
            value: '',
            minimap: {enabled: false},
            automaticLayout: true
        })

        // sync right editor with parsing result
        function syncEditors() {
            var parsed = parse(leftLang, editorLeft.getValue())
            if (parsed.result) {
                model.context.database = parsed.result
                editorRight.setValue(format(rightLang, parsed.result))
                // preserve the undo stack with: `model.pushEditOperations([], [{range: model.getFullModelRange(), text: value}])`
            }
            monaco.editor.setModelMarkers(model, 'owner', (parsed.errors || []).map(e => aml.monaco.createMarker(e, model, editorLeft)))
        }

        syncEditors()
        editorLeft.onDidChangeModelContent(function (e) {
            syncEditors()
        })

        function parse(lang, content) {
            if (lang === 'aml') return aml.parseAml(content)
            if (lang === 'json') return aml.parseJson(content)
            return aml.ParserResult.failure([{name: 'UnsupportedDialect', kind: 'error', message: 'Unsupported source dialect: ' + lang}])
        }
        function format(lang, content) {
            if (lang === 'aml') return aml.generateAml(content)
            if (lang === 'json') return aml.formatJson(content)
            return 'Unsupported destination dialect: ' + lang
        }
        function defaultValue(lang) {
            if (lang === 'aml') return `users
  id uuid pk
  name varchar index
  email varchar unique
  role user_role(admin, guest)=guest

posts
  id uuid pk
  title varchar
  content text | in markdown
  created_at timestamp=\`now()\`
  created_by uuid -> users(id) # inline relation
`
            if (lang === 'json') return `{
  "entities": [
    {
      "name": "users",
      "attrs": [
        {"name": "id", "type": "uuid"},
        {"name": "name", "type": "varchar"},
        {"name": "email", "type": "varchar"},
        {"name": "role", "type": "user_role", "default": "guest"}
      ],
      "pk": {"attrs": [["id"]]},
      "indexes": [
        {"attrs": [["email"]], "unique": true},
        {"attrs": [["name"]]}
      ]
    },
    {
      "name": "posts",
      "attrs": [
        {"name": "id", "type": "uuid"},
        {"name": "title", "type": "varchar"},
        {"name": "content", "type": "text", "doc": "in markdown"},
        {"name": "created_at", "type": "timestamp", "default": "\`now()\`"},
        {"name": "created_by", "type": "uuid"}
      ],
      "pk": {"attrs": [["id"]]}
    }
  ],
  "relations": [
    {
      "src": {"entity": "posts"},
      "ref": {"entity": "users"},
      "attrs": [{"src": ["created_by"], "ref": ["id"]}]
    }
  ],
  "types": [
    {"name": "user_role", "values": ["admin", "guest"]}
  ]
}
`
            return ''
        }
    })
</script>

<%= render "_footer.html", conn: @conn %>
